import {R, map} from './helpers.js'

export function makeRectangleComposition(PARAMS) {
  const shapes = []

  const SMALL_MIN_WIDTH_K = PARAMS.shapeSizeMin.x
  const SMALL_MAX_WIDTH_K = PARAMS.shapeSizeMax.x
  const SMALL_MIN_HEIGHT_K = PARAMS.shapeSizeMin.y
  const SMALL_MAX_HEIGHT_K = PARAMS.shapeSizeMax.y
  const BIG_MIN_WIDTH_K = 2 * PARAMS.shapeSizeMin.x
  const BIG_MAX_WIDTH_K = 2 * PARAMS.shapeSizeMax.x
  const BIG_MIN_HEIGHT_K = 2 * PARAMS.shapeSizeMin.y
  const BIG_MAX_HEIGHT_K = 2 * PARAMS.shapeSizeMax.y
  const SPACE_MIN_K = 2 * PARAMS.shapeSizeMin.y
  const SPACE_MAX_K = 2 * PARAMS.shapeSizeMax.y
  const OVERLAP_K = PARAMS.shapesOverlap
  const sizeX = PARAMS.sizeX
  const sizeY = PARAMS.sizeY

  function getRectWH(bigOrSmall = 'small') {
    let w, h
    if (bigOrSmall === 'small') {
      w = map(R(), 0, 1, SMALL_MIN_WIDTH_K, SMALL_MAX_WIDTH_K) * sizeY
      h = map(R(), 0, 1, SMALL_MIN_HEIGHT_K, SMALL_MAX_HEIGHT_K) * sizeY
    } else {
      w = map(R(), 0, 1, BIG_MIN_WIDTH_K, BIG_MAX_WIDTH_K) * sizeY
      h = map(R(), 0, 1, BIG_MIN_HEIGHT_K, BIG_MAX_HEIGHT_K) * sizeY
    }

    return [w, h]
  }

  // let x = 0//{{{
  // let rectsInGroup = 0 // groups are separated with spaces
  // while (x < sizeX) {
  //   let h = getShapeHeight(x, MIN_HEIGHT_K, MAX_HEIGHT_K, FREQ)
  //   let minWidth = sizeY * MIN_WIDTH_K
  //   let maxWidth = h * MAX_WIDTH_K
  //   let r = R()
  //   r = r ** PARAMS.shapesDistribution
  //   let w = r * (maxWidth - minWidth) + minWidth
  //   if (w < 1) w = 1

  // let dh = h * OFFSET_Y_K
  // let offsetY = (R() * 2 - 1) * dh

  // if (R() < PROBABILITY) {
  //   let y = sizeY / 2 + offsetY
  //   let wOverlap = w + OVERLAP_K // Apply overlap factor
  //   let poly = [
  //     [x + w / 2 - wOverlap / 2, y - h / 2],
  //     [x + w / 2 - wOverlap / 2, y + h / 2],
  //     [x + w / 2 + wOverlap / 2, y + h / 2],
  //     [x + w / 2 + wOverlap / 2, y - h / 2],
  //   ]
  //   let shape.polys = [poly]
  //   shape.type = 'rect'
  //   shapes.push(shape)
  // }
  // x += w
  // }

  // Shuffle the shapes array
  // for (let i = shapes.length - 1; i > 0; i--) {
  //   const j = Math.floor(R() * (i + 1))
  //   ;[shapes[i], shapes[j]] = [shapes[j], shapes[i]]
  // }//}}}

  for (let x = -BIG_MAX_WIDTH_K * sizeY; ; ) {
    // console.log('sizeX:', sizeX)
    // console.log('x:', x)
    let shape = {}
    let [w, h] = getRectWH('small')
    if (x - w / 2 > sizeX) {
      break
    }
    let y = sizeY / 2 - h / 2

    let poly = [
      [x, y],
      [x + w, y],
      [x + w, y + h],
      [x, y + h],
    ]
    shape = [poly]
    shape.type = 'rect'
    shapes.push(shape)

    x += w
  }

  return shapes
}
